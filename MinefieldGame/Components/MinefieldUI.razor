@if (Minefield != null)
{
    <MudPaper Class="m-4 p-2">
        <MudToolBar>
            <MudTooltip Text="New Game">
                <MudIconButton Class="me-4" OnClick="NewGame" Icon="@Icons.Material.Filled.Replay" Color="Color.Primary" Variant="Variant.Outlined" />
            </MudTooltip>

            <MudSelect T="Difficulty" Label="Difficulty" Value="@DifficultySetting" ValueChanged="OnDifficultyChanged" Variant="Variant.Outlined">
                <MudSelectItem Value="@Difficulty.Easy" />
                <MudSelectItem Value="@Difficulty.Medium" />
                <MudSelectItem Value="@Difficulty.Hard" />
            </MudSelect>

            <MudSpacer/>

            <div class="border border-dark rounded p-2 flex-row">
                <MudIcon Icon="@FlagIcon"/>
                @Minefield.RemainingMines
            </div>

            <MudSpacer/>

            <div class="border border-dark rounded p-2 flex-row">
                <MudIcon Icon="@Icons.Material.Filled.Timer" />
                @Minefield.TimeElapsed
            </div>

            <MudSpacer/>

            <div>
                @if (Minefield.State == GameState.NewGame)
                {
                    <text>Begin Sweep</text>
                }
                else if (Minefield.State == GameState.Playing)
                {
                    <text>Sweeping...</text>
                }
                else if (Minefield.State == GameState.Lost)
                {
                    <text><MudIcon Icon="@Icons.Material.Filled.Cancel" Color="Color.Error" /> Sweep Failed</text>
                }
                else
                {
                    <text><MudIcon Icon="@Icons.Material.Filled.Check" Color="Color.Success" /> Sweep Complete!</text>
                }
            </div>
        </MudToolBar>
    </MudPaper>

    <div class="container mb-5 minefield">
        @for (int i = 0; i < Minefield.Rows; i++)
        {
            var y = i;

            <div class="row">
                @for (int j = 0; j < Minefield.Columns; j++)
                {
                    var x = j;
                    var cell = Minefield.Field[x][y];

                    <div class="@($"col border-2 minefield-space minefield-space-{Minefield.Difficulty.ToString().ToLower()} minefield-space-{(cell.Revealed ? "revealed" : "hidden")}{(HighlightX <= x + 1 && HighlightX >= x - 1 && HighlightY <= y + 1 && HighlightY >= y - 1 ? "-highlight" : "")}{(HighlightX == x && HighlightY == y ? "-center" : "")}")"
                         @onclick="@(() => RevealOrHighlightSpace(x, y))"
                         @oncontextmenu="@(() => FlagSpace(x, y))" @oncontextmenu:preventDefault
                         style="@($"border-color: {(HighlightY - 1 == y && HighlightX - 1 <= x && x <= HighlightX + 1 ? "blue" : "white")} "
                                  + $"{(HighlightX + 1 == x && HighlightY - 1 <= y && y <= HighlightY + 1 ? "blue" : "white")} "
                                  + $"{(HighlightY + 1 == y && HighlightX - 1 <= x && x <= HighlightX + 1 ? "blue" : "white")} "
                                  + $"{(HighlightX - 1 == x && HighlightY - 1 <= y && y <= HighlightY + 1 ? "blue" : "white")} !important")">
                        <div class="minefield-space-container">
                            @if(cell.AdjacentMines > 0 && cell.Revealed)
                            {
                                <div class="minefield-space-meter" style="height: 50%;"></div>
                            }

                            <div class="minefield-space-icon">
                                @if (cell.Revealed)
                                {
                                    @if (cell.HasMine)
                                    {
                                        <MudIcon Icon="@ExplodedMineIcon" Style="color:orangered" />
                                    }
                                    else if (cell.AdjacentMines > 0)
                                    {
                                        @cell.AdjacentMines
                                    }
                                }
                                else
                                {
                                    @if (cell.Flagged)
                                    {
                                        @if (Minefield.GameOver)
                                        {
                                            @if (cell.HasMine)
                                            {
                                                <MudIcon Icon="@FlaggedMineIcon" Style="color:red" />
                                            }
                                            else
                                            {
                                                <MudIcon Icon="@FlagIcon" Style="color:black" />
                                            }
                                        }
                                        else
                                        {
                                            <MudIcon Icon="@FlagIcon" Style="color:red" />
                                        }
                                    }
                                    else if (cell.HasMine && Minefield.GameOver)
                                    {
                                        <MudIcon Icon="@UnexplodedMineIcon" Style="color:black" />
                                    }
                                }
                            </div>
                        </div>
                    </div>
                }
            </div>
        }
    </div>
}

@code {
    private Difficulty DifficultySetting { get; set; }
    private Minefield Minefield { get; set; }
    private int HighlightX { get; set; } = -10;
    private int HighlightY { get; set; } = -10;
    private System.Threading.Timer Timer { get; set; }

    private readonly string FlagIcon = Icons.Material.Filled.Flag;
    private readonly string FlaggedMineIcon = Icons.Material.Filled.FlagCircle;
    private readonly string ExplodedMineIcon = Icons.Material.Filled.Brightness7;
    private readonly string UnexplodedMineIcon = Icons.Material.Filled.Brightness1;

    protected override void OnInitialized()
    {
        base.OnInitialized();
        NewGame();
    }

    private void NewGame()
    {
        Minefield = new Minefield(DifficultySetting);
        // Get rid of the old timer.
        if (Timer != null)
            Timer.Dispose();
        // Get a new timer ready.
        Timer = new System.Threading.Timer(async obj =>
        {
            if (Minefield != null && Minefield.State == GameState.Playing)
            {
                Minefield.TimeElapsed++;
                await InvokeAsync(StateHasChanged);
            }
        }, new AutoResetEvent(true), 1000, 1000);
    }

    private void OnDifficultyChanged(Difficulty difficulty)
    {
        DifficultySetting = difficulty;
        NewGame();
    }

    private void RevealOrHighlightSpace(int x, int y)
    {
        var cell = Minefield.Field[x][y];
        if (cell.Revealed && cell.AdjacentMines > 0 && (HighlightX != x || HighlightY != y))
        {
            HighlightX = x;
            HighlightY = y;
        }
        else
        {
            HighlightX = -10;
            HighlightY = -10;
            Minefield.RevealSpace(x, y);
        }
    }

    private void FlagSpace(int x, int y)
    {
        Minefield.FlagSpace(x, y);
    }
}
