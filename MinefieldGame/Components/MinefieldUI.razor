<h3>Minefield UI</h3>

<div>

</div>

@if (Minefield != null)
{
    <div class="container minefield">
        @for (int i = 0; i < Minefield.Rows; i++)
        {
            var x = i;

            <div class="row">
                @for (int j = 0; j < Minefield.Columns; j++)
                {
                    var y = j;
                    var cell = Minefield.Field[x][y];

                    <div class="@($"col border minefield-space-{Minefield.Difficulty.ToString().ToLower()} minefield-space-{(cell.Revealed ? "revealed" : "hidden")}")"
                         @onclick="() => RevealSpace(x, y)"
                         @oncontextmenu="() => FlagSpace(x, y)" @oncontextmenu:preventDefault>
                        @if (cell.Revealed)
                        {
                            @if (cell.HasMine)
                            {
                                <MudIcon Icon="@ExplodedMineIcon"/>
                            }
                            else if (cell.AdjacentMines > 0)
                            {
                                @cell.AdjacentMines
                            }
                        }
                        else
                        {
                            @if (cell.Flagged)
                            {
                                <MudIcon Icon="@FlagIcon"/>
                            }
                            else if (cell.HasMine && Minefield.GameOver)
                            {
                                <MudIcon Icon="@UnexplodedMineIcon"/>
                            }
                        }
                    </div>
                }
            </div>
        }
    </div>
}

@code {
    private Difficulty DifficultySetting { get; set; }
    private Minefield Minefield { get; set; }

    private readonly string FlagIcon = Icons.Material.Filled.Flag;
    private readonly string ExplodedMineIcon = Icons.Material.Filled.Brightness7;
    private readonly string UnexplodedMineIcon = Icons.Material.Filled.Brightness1;

    protected override void OnInitialized()
    {
        base.OnInitialized();
        Minefield = new Minefield(DifficultySetting);
    }

    private void RevealSpace(int x, int y)
    {
        Minefield.RevealSpace(x, y);
    }

    private void FlagSpace(int x, int y)
    {
        Minefield.FlagSpace(x, y);
    }
}
