@if (Minefield != null)
{
    <MudPaper Class="m-4 p-2">
        <MudToolBar>
            <MudTooltip Text="New Game">
                <MudIconButton Class="me-4" OnClick="NewGame" Icon="@Icons.Material.Filled.Replay" Color="Color.Primary" Variant="Variant.Outlined" />
            </MudTooltip>

            <MudSelect T="Difficulty" Label="Difficulty" Value="@DifficultySetting" ValueChanged="OnDifficultyChanged" Variant="Variant.Outlined">
                <MudSelectItem Value="@Difficulty.Easy" />
                <MudSelectItem Value="@Difficulty.Medium" />
                <MudSelectItem Value="@Difficulty.Hard" />
            </MudSelect>

            <MudSpacer/>

            <div class="border border-dark rounded p-2 flex-row">
                <MudIcon Icon="@FlagIcon"/>
                @Minefield.RemainingMines
            </div>

            <MudSpacer/>

            <div class="border border-dark rounded p-2 flex-row">
                <MudIcon Icon="@Icons.Material.Filled.Timer" />
                @Minefield.TimeElapsed
            </div>

            <MudSpacer/>

            <div>
                @if (Minefield.State == GameState.NewGame)
                {
                    <text>Begin Sweep</text>
                }
                else if (Minefield.State == GameState.Playing)
                {
                    <text>Sweeping...</text>
                }
                else if (Minefield.State == GameState.Lost)
                {
                    <text><MudIcon Icon="@Icons.Material.Filled.Cancel" Color="Color.Error" /> Sweep Failed</text>
                }
                else
                {
                    <text><MudIcon Icon="@Icons.Material.Filled.Check" Color="Color.Success" /> Sweep Complete!</text>
                }
            </div>
        </MudToolBar>
    </MudPaper>

    <div class="container mb-5 minefield">
        @for (int i = 0; i < Minefield.Rows; i++)
        {
            var x = i;

            <div class="row">
                @for (int j = 0; j < Minefield.Columns; j++)
                {
                    var y = j;
                    var cell = Minefield.Field[x][y];

                    <div class="@($"col border minefield-space minefield-space-{Minefield.Difficulty.ToString().ToLower()} minefield-space-{(cell.Revealed ? "revealed" : "hidden")}")"
                         @onclick="() => RevealSpace(x, y)"
                         @oncontextmenu="() => FlagSpace(x, y)" @oncontextmenu:preventDefault>
                        @if (cell.Revealed)
                        {
                            @if (cell.HasMine)
                            {
                                <MudIcon Icon="@ExplodedMineIcon" Style="color:orangered"/>
                            }
                            else if (cell.AdjacentMines > 0)
                            {
                                @cell.AdjacentMines
                            }
                        }
                        else
                        {
                            @if (cell.Flagged)
                            {
                                @if (Minefield.GameOver)
                                {
                                    @if (cell.HasMine)
                                    {
                                        <MudIcon Icon="@FlaggedMineIcon" Style="color:red" />
                                    }
                                    else
                                    {
                                        <MudIcon Icon="@FlagIcon" Style="color:black" />
                                    }
                                }
                                else
                                {
                                    <MudIcon Icon="@FlagIcon" Style="color:red" />
                                }
                            }
                            else if (cell.HasMine && Minefield.GameOver)
                            {
                                <MudIcon Icon="@UnexplodedMineIcon" Style="color:black"/>
                            }
                        }
                    </div>
                }
            </div>
        }
    </div>
}

@code {
    private Difficulty DifficultySetting { get; set; }
    private Minefield Minefield { get; set; }
    private System.Threading.Timer Timer { get; set; }

    private readonly string FlagIcon = Icons.Material.Filled.Flag;
    private readonly string FlaggedMineIcon = Icons.Material.Filled.FlagCircle;
    private readonly string ExplodedMineIcon = Icons.Material.Filled.Brightness7;
    private readonly string UnexplodedMineIcon = Icons.Material.Filled.Brightness1;

    protected override void OnInitialized()
    {
        base.OnInitialized();
        NewGame();
    }

    private void NewGame()
    {
        Minefield = new Minefield(DifficultySetting);
        // Get rid of the old timer.
        if (Timer != null)
            Timer.Dispose();
        // Get a new timer ready.
        Timer = new System.Threading.Timer(async obj =>
        {
            if (Minefield != null && Minefield.State == GameState.Playing)
            {
                Minefield.TimeElapsed++;
                await InvokeAsync(StateHasChanged);
            }
        }, new AutoResetEvent(true), 1000, 1000);
    }

    private void OnDifficultyChanged(Difficulty difficulty)
    {
        DifficultySetting = difficulty;
        NewGame();
    }

    private void RevealSpace(int x, int y)
    {
        Minefield.RevealSpace(x, y);
    }

    private void FlagSpace(int x, int y)
    {
        Minefield.FlagSpace(x, y);
    }
}
